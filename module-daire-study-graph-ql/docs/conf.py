# -*- coding: utf-8 -*-
#
# Magento module documentation build configuration file, created by
# sphinx-quickstart on Fri Feb 27 09:54:49 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import subprocess
import json
import time

def get_process_output(command_definition):
    try:
        with open(os.devnull, 'w') as FNULL:
            return subprocess.check_output(command_definition, stderr=FNULL)    
    except subprocess.CalledProcessError, e:
        pass
        
    return ''

def render_template(template, variables):
    result = template
    
    for name,value in variables.items():
        if not value:
            value = ''

        result = result.replace('{var:%s}' % name, value)
            
    return result

def get_context_value(env_keys, query_command):
    if type(env_keys) is str:
        env_keys = [env_keys]
    
    for env_key in env_keys:
        value = os.environ.get(env_key, '')
        
        if value:
            return value
            
    if not value:
        value = get_process_output(query_command)

    return value
    
def load_package_config(package_root):
    composer_file_path = package_root + '/composer.json'
    
    if not os.path.isfile(composer_file_path):
        return {}
    
    return json.load(open(composer_file_path))

def resolve_registration_file_path(package_config, package_root):
    if 'autoload' not in package_config or 'psr-4' not in package_config['autoload']:
        return ''

    for key,value in package_config['autoload']['psr-4'].items():
        sources_root = package_root + '/' + value
    
        registration_file = sources_root + '/registration.php'
    
        if not os.path.isfile(registration_file):
            continue

        return registration_file
        
    return ''

def get_magento_module_code(registration_file_path):
    if not registration_file_path:
        registration_file_path = '<blank>'
    
    if not os.path.isfile(registration_file_path):
        raise Exception('No such file: %s' % registration_file_path)

    registration_code_fetcher = '''    
        namespace Magento\Framework\Component { 
            class ComponentRegistrar { 
                const MODULE=1;const LIBRARY=2;const THEME=3;const LANGUAGE=4; 
                static function register($_, $token) { 
                    echo $token ."\n"; 
                } 
            } 
        }; 
    
        namespace {
            include "{var:RegistrationFile}";
        };
    '''
    
    registration_query = render_template(registration_code_fetcher, {
        'RegistrationFile': registration_file_path
    })
    
    return get_process_output(['php', '-r', registration_query]).strip()

# Get Lumav module CODE and Description to be used in documentation
# variables and in documentation build config

lumav_module_code = 'Aedesws_Dummy'
lumav_module_name = 'Aedesws_Dummy'
lumav_module_description = 'Module\'s short description'
lumav_module_vendor = lumav_module_code.split('_')[0]
lumav_module_issues_link = ''

package_config = load_package_config('..')

if package_config:
    registration_file_path = resolve_registration_file_path(package_config, '..')
    lumav_module_description = package_config['description']
    lumav_module_issues_link = package_config['support']['issues']
    lumav_email = package_config['support']['email']
    lumav_keywords = ', '.join(package_config['keywords'])
    lumav_module_code = package_config['modulecode']
    lumav_module_name = package_config['name']
    
    if registration_file_path:
        lumav_module_code = get_magento_module_code(registration_file_path)

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = lumav_module_code
copyright = time.strftime("%Y, Lumav")

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
from xml.dom import minidom

# branch_name = get_context_value('JOB_BASE_NAME', ['git', 'branch']).strip()
# version = get_process_output(['composer', '--working-dir=./..', 'changelog:version', '--branch', branch_name]).strip()

branch_name = 'master'
version = '1'

# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', 'includes/*.rst']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = lumav_module_code + 'doc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', lumav_module_code + '.tex', u'Lumav\\_Module Documentation',
   lumav_module_vendor, 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', lumav_module_code, lumav_module_code.replace('_', '\\_'),
     [lumav_module_vendor], 1)
]

# If true, show URL addresses after external links.
man_show_urls = False

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', lumav_module_code, lumav_module_code + ' Documentation',
   u'Lumav', lumav_module_code, lumav_module_description,
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

# Additions
html_theme = "sphinx_rtd_theme"
html_theme_path = ["_themes", ]
highlight_language = 'php'

# This will make php language not to require <?php to be included
from sphinx.highlighting import lexers
from pygments.lexers.web import PhpLexer
lexers['php'] = PhpLexer(startinline=True)

# Add Repository Information and enable 'Edit In BitBucket' links   
def replace_source_variables(app, pagename, source):
    values = merge_dictionaries(
        app.config.variable_values, 
        {'DocPageName': pagename}
    )
    
    source[0] = render_template(source[0], values)
       
def update_page_context_metadata(app, pagename, templatename, context, doctree):                   
    if 'meta' not in context:
        return

    variables = app.config.variable_values        

    if not variables['RepositoryUrl']:
        return

    var_key = 'DocsSrcTipUrl'
    
    if pagename == 'changelog':
        var_key = 'ChangelogSrcTipUrl'

    context['meta']['bitbucket_url'] = render_template(
        variables.get(var_key, ''), 
        {'DocPageName': pagename}
    )

def normalize_url(url): 
    if url[0:4] == 'http':
        return url

    return 'http://%s' % '@'.join(url.split('@')[1:]).rstrip()

def render_template(template, variables):
    result = template
    
    for name,value in variables.items():
        result = result.replace('{var:%s}' % name, value)
            
    return result

def merge_dictionaries(dict1, dict2):
    result = dict1.copy()
    
    result.update(dict2)
    
    return result
    
def cross_pollinate_variables(variables):
    result = variables.copy()
    
    for name in result:
        result[name] = render_template(result[name], result)

    return result

def reset_dictionary_values(data):
    for key in data:
        data[key] = ''
        
    return data

# repository_url = get_context_value(['MERCURIAL_REPOSITORY_URL', 'REPOSITORY_URL'], ['hg', 'paths', 'default']).strip()
# branch_name = get_context_value('JOB_BASE_NAME', ['hg', 'branch']).strip()
# build_changeset = get_process_output(['hg', 'parent', '--template={node}']).strip()

repository_url = 'https://bitbucket.org/'+lumav_module_name
branch_name = 'master'
build_changeset = '1'

variable_values = {
    'RepositoryUrl' : repository_url,
    'RepositoryBase' : normalize_url(repository_url),
    'BuildChangeSet' : build_changeset,
    'RepositoryName' : u'/'.join(repository_url.split('/')[-2:]).rstrip(),
    'RepositorySrcUrl' : '{var:RepositoryBase}/src/{var:BuildChangeSet}',
    'RepositorySrcTipUrl' : '{var:RepositoryBase}/src/%s' % branch_name,
    'RepositoryRawSrcUrl' : '{var:RepositoryBase}/raw/{var:BuildChangeSet}',
    'RepositoryRawSrcTipUrl' : '{var:RepositoryBase}/raw/%s' % branch_name,
    'DocsSrcUrl' : '{var:RepositorySrcUrl}/docs/{var:DocPageName}.rst',
    'DocsSrcTipUrl' : '{var:RepositorySrcTipUrl}/docs/{var:DocPageName}.rst',
    'ChangelogSrcUrl' : '{var:RepositorySrcUrl}/changelog.json',
    'ChangelogSrcTipUrl' : '{var:RepositorySrcTipUrl}/changelog.json',
    'DocumentationLink' : '`{var:RepositoryName} <{var:DocsSrcUrl}>`__',
    'RepositoryLink' : '`{var:RepositoryName} <{var:RepositoryBase}>`__',
    'SourcesLink' : '`{var:RepositoryName} <{var:RepositorySrcUrl}>`__',
    'IssuesUrl': lumav_module_issues_link,
    'ModuleCode': lumav_module_code,
    'ModuleDescription': lumav_module_description,
    'Email': lumav_email,
    'Keywords': lumav_keywords
}

if not repository_url:
    variable_values = reset_dictionary_values(variable_values)

variable_values = cross_pollinate_variables(variable_values)

def setup(app):
    app.add_config_value('variable_values', {}, True)
    app.connect('source-read', replace_source_variables)   
    app.connect('html-page-context', update_page_context_metadata)